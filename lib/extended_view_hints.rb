require('dev_tools')

# Some notes on using vanilla (original) ViewHints:
#
# * there can only be a single call to field_help, field_names etc.
#   Otherwise only the last call of each will have any effect.
# * after the initial call, you can treat each call as a dictionary, e.g.
#   field_help[:source] = "hata"
# * you can include hints for non-existent fields "foo"
#
# There are broadly 3 things that need to be fixed with ViewHints:
#
# 1. adding other class or types of viewhints
# 2. defining every type of hint for a single field in one place, rather than
#    every field for a single type of hint in one place (thus allowing a field
#    to be commented out)
# 3. it should be possible to define default values for all hints rather than
#    having to specify them individually
#
# The first is easily solved by adding a setter to this base class.
#
# The second is solved by the `field` method. It should be called with the name
# of the field and then a hash/keys that give values for each type of hint.
# Field or hint names can be given as strings or symbols, they should be
# translated to the correct form. `field` can be called::
#
#		field(:foo, {
#			:rows => 15,
#			:field_help => "no such thing"
#		})
#
# Solving the third problem is tricky. Our solution is to explicitly for the
# default values to be set. Not thhis must be the last thing done in the
# derived class.
#
# @example
#	class BiosequenceHints < ExtendedViewHints
#	
#		field_names ({
#			:seqdata => "Sequence",
#		})
#		
#		field_help ({
#			:seqdata => "The sequence residues entered as standard IUPAC codes.
#				Whitespace will be stripped before saving.",
#			:identifier => "An id for this record. When combined with the source, it
#				should form a globally unique name. If one is not given, it will be
#				autogenerated.",
#			:source => "The originating authority for this record. It should either be
#				a single definitive name (e.g. 'genbank') or reverse-url format
#				(e.g. 'uk.ac.imperial.bio').",
#			:title => "A user-friendly name for the record that will appear
#				in all listings.",
#			:description => "A summary of the record and its content.",
#		})
#		
#		rows ({
#			:description => 5,
#			:seqdata => 7,
#		})
#		
#		children :bioseqfeatures, :bioseqcollections
#	
#		set_defaults	
#	end
#
class ExtendedViewHints < Hobo::ViewHints
	
#	 Initialise hints with default values, but don't overwrite.
#	
#	 Awkwardly, this must be called after all values have been set in the hints.
#	
	def self.set_defaults()
		# This is for solving the third problem (defaults) as above. As hints are
		# stored in a class, not an object, there is no way of patching things in
		# a c'tor. The setter function is only called when the member is created,
		# not when the member is assigned to, so the defaults cannot be set there.
		# Even if we did, the setter in the base object (ViewHints) is still
		# called in the base class definition. The only viable solution which we
		# use here is for the derived class to explicitly call the base to set
		# defaults. But you can't call this just anywhere because the hints are
		# created by `setter`, but are set as nil. The hash is only initialised
		# when a derived hint sets the value and it overwrites the entire thing.
		# So the defaults have to be filled in _after_ the hints are set. This may
		# also mean that if you are going to access that hint later, you have to
		# set it, or the whole thing will be nil. Unclear.
		ExtendedViewHints.defaults.each_pair { |hint,vals|
			old_hash = instance_variable_get("@#{hint.to_s}")
			if old_hash.nil?
				old_hash = instance_variable_set("@#{hint.to_s}", {})
			end
			vals.each_pair { |k, v|
				if ! old_hash.has_key?(k)
					old_hash[k] = v
				end
			}
		}
	end

	def self.field(name, hints={})
		hints.each_pair { |k,v|
			old_hash = instance_variable_get("@#{k.to_s}")
			old_hash[name.to_sym] = v
		}
	end
	
#	 create a new `rows` hint
	setter(:rows, {
		:description => 5,
		:foobar => 'baz'
	})

	setter(:defaults,
		:rows => {
			:description => 5,
		},
		:field_names => {
			:identifier => "ID",
		},
		:field_help => {
			:identifier => "An id for this record. When combined with the source,
			it should form a globally unique name. If one is not given, it will be
			autogenerated.",
			:source => "The originating authority for this record. It should either
			be a single definitive name (e.g. 'genbank') or reverse-url format
			(e.g. 'uk.ac.imperial.bio').",
			:title => "A user-friendly name for the record that will appear
			in all listings.",
			:description => "A summary of the record and its content.",
		}
	)
end
