

<%#
The page for a tool form.

This includes the overall page layout, and the content including the
front-matter (the title and leading description), and slots for the results
and the form. Each individual result and the actual form fields are rendered
elsewhere.


%>
<def tag="tool-page" attrs="toolform, method">
	<page title="&this.title" merge-attrs>
		<content:>
			<p>&laquo; <a href="." class="discrete">Back to all tools</a></p>

			<h2 param="title"><%= this.title %></h2>
		
			<%# pre-ramble %>
			<p param="description"><%= this.description %></p>
			
			<flash-messages />
			
			<%#
			If there are results, put them here. If non-nil, are responding to
			submission & there's something to render. Else, this is a first view.
			%>
			<% results = session[:results] %>
			<if test="&!results.nil?">
				<div class="tool-results">
					<h3>Results</h3>
						<%
							# put results in array to render one by one
							# Zero-length array means no results.
							# TODO: stick null result message (and success) into flash?
							if results.class != Array
								results = [results]
							end	
						%>
						<if test="&results.size == 0">
							<p param="no-result-message">
								No results were returned. Try changing criteria or broadening
								parameters.
							</p>
						</if>
						<else>
							<tool-result repeat="&results" />
						</else>
				</div>
			</if>
			
			<%# put the form here %>
			<div class="tool-form">
				<%
					attrs_hsh = {
						:action => "",
						:method => this.form_method,
					}
					if this.enctype_multipart?
						attrs_hsh[:enctype] = "multipart/form-data"
					end
					
				-%>
				<form merge-attrs="&attrs_hsh">
					<div param="tool-form-fields">
						THIS IS WHERE THE FORM FIELDS GO
					</div>
					<br clear="all" />
					<div class="tool-buttons" param="tool-buttons">
						<repeat:submit_buttons>
							<input type="submit" name="_submit" value="&this[1]" label="&this[0]"
								class="button submit-button"/>
						</repeat>
						<if test="&this.has_reset_button">
							<input type="reset" />
						</if>
					</div>
				</form>
			</div>
		
		</content:>
	</page>
</def>


<def tag="form-field" attrs="name, type, value, title, options, help">
	<%
		# name must be provided
		# type is assumed to be 'text' unless otherwise said
		type ||= "text"
		# title is derived from the name if need be
		title ||= title || name.capitalize()
		# grab the value from the request if possible, otherwise default
		value = request.parameters[name] || value
		# formid from context
		formid = this.id
		# has helptext been provided?
		help ||= false
	%>
	<tr> 
		<th class="#{name}-label"> <%= title %></th> 
		<td class="#{name}-view">
			
			<if test="&type == 'text'">
				<input class="#{name}-tag #{type} #{formid}-#{name}"
					id="#{formid}_#{name}" name="#{name}" type="#{type}"
					value="#{value}" />
			</if>
			
			<if test="&type == 'boolean'">
				<%=
					# TODO: set id?
					checked = (value == '0')? false : true
					cb_tag = check_box_tag(name, '1', checked, attributes)
					cb_hidden_tag = hidden_field_tag(name, '0', :id => nil)
					HoboSupport::RAILS_AT_LEAST_23 ? cb_hidden_tag + cb_tag : cb_tag + cb_hidden_tag
				%>
			</if>
			
			<if test="&type == 'selectone'">
				<%
				# TODO: a way to set disabled choices and accept null answers?
				%>
				<select name="#{name}"
					class="#{name}-tag #{type} #{formid}-#{name}"
					id="#{formid}_#{name}">
				  <%= options_for_select(options, value.to_i) %>
				</select>
			</if>
			
			<div if="&help" class="input-help"><% help %></div>
		</td> 
	</tr>
</def>


<def tag="form-section" attrs="name, title">
	<%
		# This generates a useful label for form sections
		# name must be provided
		# title is derived from the name if need be
	%>
	<tr><th class="#{name}-label section-label"><%= title %></th></tr>
</def>

<def tag="tool-result" polymorphic>
	<div class="tool-result" param="result-content">
		<%= this %>
	</div>
</def>

<def tag="tool-result" for="String">
	<tool-result merge>
		<result-content:>
			A string = <%= this %>
		</result-content>
	</tool-result>
</def>

<def tag="tool-result" for="Fixnum">
	<tool-result merge>
		<result-content:>
			A fixnum = <%= this %>
		</result-content>
	</tool-result>
</def>
